# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fv4RWprgCrHT-OJrm5zCPJTIjxCImH0c
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.impute import SimpleImputer

from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

url = "https://raw.githubusercontent.com/ageron/handson-ml2/master/datasets/housing/housing.csv"
data = pd.read_csv(url)

print(data.head())
print("\nShape:", data.shape)

print("\nInfo:")
print(data.info())

print("\nMissing values per column:")
print(data.isna().sum())

print("\nCategorical 'ocean_proximity' distribution:")
print(data['ocean_proximity'].value_counts())

print("\nNumeric summary:")
print(data.describe())

target_col = "median_house_value"
X = data.drop(columns=[target_col])
y = data[target_col]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

X_train.shape, X_test.shape

numeric_features = X.select_dtypes(include=[np.number]).columns.tolist()
categorical_features = X.select_dtypes(exclude=[np.number]).columns.tolist()

numeric_preprocess = Pipeline(steps=[
    ("imputer", SimpleImputer(strategy="median")),
    ("scaler", StandardScaler())
])

categorical_preprocess = Pipeline(steps=[
    ("imputer", SimpleImputer(strategy="most_frequent")),
    ("ohe", OneHotEncoder(handle_unknown="ignore"))
])

preprocess = ColumnTransformer(
    transformers=[
        ("num", numeric_preprocess, numeric_features),
        ("cat", categorical_preprocess, categorical_features),
    ]
)

linreg = Pipeline(steps=[
    ("preprocess", preprocess),
    ("regressor", LinearRegression())
])

# Train the model
linreg.fit(X_train, y_train)

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Predictions on test data
y_pred = linreg.predict(X_test)

# Evaluation metrics
mae  = mean_absolute_error(y_test, y_pred)
rmse = mean_squared_error(y_test, y_pred)**0.5
r2   = r2_score(y_test, y_pred)

print(f"Linear Regression -> MAE: {mae:,.0f}")
print(f"Linear Regression -> RMSE: {rmse:,.0f}")
print(f"Linear Regression -> RÂ²: {r2:.3f}")

# Example: Test dataset se ek sample
sample = X_test.iloc[[0]]
print("Sample input:\n", sample)

# Predict
pred_value = linreg.predict(sample)[0]
print("Predicted house price:", pred_value)
print("Actual house price:", y_test.iloc[0])

import joblib

# Save
joblib.dump(linreg, "linear_house_price_model.pkl")

# Load
loaded_linreg = joblib.load("linear_house_price_model.pkl")

# Test prediction after loading
print("Prediction after loading:", loaded_linreg.predict(sample)[0])