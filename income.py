# -*- coding: utf-8 -*-
"""income.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12j528j5SN0W7ZUYK-eLMjpDZG_N9gxWL
"""



from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

df=pd.read_csv("/content/income_evaluation_new.csv")
df

df["workclass"].unique()

df['workclass']=df['workclass'].replace("State-gov",0)
df['workclass']=df['workclass'].replace("Self-emp-not-inc",1)
df['workclass']=df['workclass'].replace("Private",2)
df['workclass']=df['workclass'].replace("Federal-gov",3)
df['workclass']=df['workclass'].replace("Local-gov",4)
df['workclass']=df['workclass'].replace("?",5)
df['workclass']=df['workclass'].replace("Self-emp-inc",6)
df['workclass']=df['workclass'].replace("Without-pay",7)
df['workclass']=df['workclass'].replace("Never-worked",8)
print(df["workclass"])

df["education"].unique()

list1= ['Bachelors', 'HS-grad', '11th', 'Masters', '9th', 'Some-college',
       'Assoc-acdm', 'Assoc-voc', '7th-8th', 'Doctorate', 'Prof-school',
       '5th-6th', '10th', '1st-4th', 'Preschool', '12th']

for i in range(0,len(list1)):
  df['education']=df['education'].replace(list1[i],i)
print(df["education"])

df["marital-status"].unique()

list2 = ['Never-married', 'Married-civ-spouse', 'Divorced',
       'Married-spouse-absent', 'Separated', 'Married-AF-spouse',
       'Widowed']

for i in range(0,len(list2)):
  df['marital-status']=df['marital-status'].replace(list2[i],i)
print(df["marital-status"])

df["occupation"].unique()

list3 = ['Adm-clerical', 'Exec-managerial', 'Handlers-cleaners',
       'Prof-specialty', 'Other-service', 'Sales', 'Craft-repair',
       'Transport-moving', 'Farming-fishing', 'Machine-op-inspct',
       'Tech-support', '?', 'Protective-serv', 'Armed-Forces',
       'Priv-house-serv']

for i in range(0,len(list3)):
  df['occupation']=df['occupation'].replace(list3[i],i)
print(df["occupation"])

df["relationship"].unique()

list4 = ['Not-in-family', 'Husband', 'Wife', 'Own-child', 'Unmarried',
       'Other-relative']

for i in range(0,len(list4)):
  df['relationship']=df['relationship'].replace(list4[i],i)
print(df["relationship"])

df["native-country"].unique()

list5 = ['United-States', 'Cuba', 'Jamaica', 'India', '?', 'Mexico',
       'South', 'Puerto-Rico', 'Honduras', 'England', 'Canada', 'Germany',
       'Iran', 'Philippines', 'Italy', 'Poland', 'Columbia', 'Cambodia',
       'Thailand', 'Ecuador', 'Laos', 'Taiwan', 'Haiti', 'Portugal',
       'Dominican-Republic', 'El-Salvador', 'France', 'Guatemala',
       'China', 'Japan', 'Yugoslavia', 'Peru',
       'Outlying-US(Guam-USVI-etc)', 'Scotland', 'Trinadad&Tobago',
       'Greece', 'Nicaragua', 'Vietnam', 'Hong', 'Ireland', 'Hungary',
       'Holand-Netherlands']

for i in range(0,len(list5)):
  df['native-country']=df['native-country'].replace(list5[i],i)
print(df["native-country"])

df["income"].unique()

list6=['<=50K', '>50K']


for i in range(0,len(list6)):
  df['income']=df['income'].replace(list6[i],i)
print(df["income"])

X=df.values[:,0:7]
X

Y = df.values[:,7]
Y

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.25,random_state=100)#25%data will go in testing ,traintest func will return 4 values thats why 4 variables,random state to keep the splitting random and constant metrics
print(Y_train.shape)

from sklearn.tree import DecisionTreeClassifier
clf=DecisionTreeClassifier(random_state=100)
clf.fit(X_train,Y_train)

Y_pred=clf.predict(X_train)
print(Y_pred)

Y_pred = clf.predict(X_test)
print("accuracy : ",accuracy_score(Y_test,Y_pred))