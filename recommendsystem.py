# -*- coding: utf-8 -*-
"""RecommendSystem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HRgZn7JagT_ah9zCr9Alnz6vnw6ujAQV

**All Recommendation system types projectt**
"""

import numpy as np
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.cluster import KMeans
from sklearn.metrics.pairwise import cosine_similarity

df = pd.read_csv('/content/drive/MyDrive/dataset/Reviews.csv')

df.head(2)

df  = df[['Id','ProductId','Score','Summary','Text']]

df.head(3)

df.shape

df = df.iloc[:10000,:]

df['Score'].value_counts().plot(kind='bar')

df['Summary']

"""**Rating Base Recommendation systemt**"""

# Select the required columns for recommendation
ratings_df = df[['Id', 'ProductId', 'Score']]
ratings_df

"""**Create a pivot table to represent the user-item rating matrixt**

In a rating-based recommendation system, a pivot table is created to represent the user-item rating matrix. This matrix captures the ratings given by users to different items/products. Each row in the pivot table represents a user, and each column represents an item/product
"""

pivot_table = ratings_df.pivot_table(index='Id', columns='ProductId', values='Score', fill_value=0)

pivot_table

items_similarity = cosine_similarity(pivot_table)

user_id = 4
k = 5

user_ratings = pivot_table.loc[user_id,:].values.reshape(1,-1)
user_ratings



# Calculate the similarity between the user's ratings and all items
user_item_similarity = cosine_similarity(user_ratings,pivot_table)

# Get the indices of top-k similar items
similar_item_indices = user_item_similarity.argsort()[0, ::-1][:k]

similar_item_indices



"""Drive Code With Recommendation"""

def recommend_items(ratings_df):
    # Filter recommendations based on minimum rating
    filtered_recommendations = ratings_df[ratings_df['Score'] >= 3].head(50)

    return filtered_recommendations


recommendations = recommend_items(ratings_df)

if not recommendations.empty:
    for index, row in recommendations.iterrows():
        print("Product ID:", row['ProductId'], "Score:", row['Score'])
else:
    print("No recommendations found.")

ratings_df

"""Rating Base using Kmeans clutering"""

import pandas as pd
from sklearn.cluster import KMeans

# # Load the dataset
# # df = pd.read_csv('your_dataset.csv')

# # Select the required columns for recommendation
# ratings_df = df[['Id', 'ProductId', 'Score']]

# Create a pivot table to represent the user-item rating matrix
# pivot_table = ratings_df.pivot_table(index='Id', columns='ProductId', values='Score', fill_value=0)

# Apply k-means clustering
num_clusters = 5  # Choose the number of clusters
kmeans = KMeans(n_clusters=num_clusters, random_state=42)
cluster_labels = kmeans.fit_predict(pivot_table)

# Example: Get recommendations for a given user
user_id = 1

# Get the cluster label for the given user
user_cluster_label = cluster_labels[user_id - 1]

# Get all users in the same cluster as the given user
users_in_same_cluster = pivot_table.index[cluster_labels == user_cluster_label]

# Get the average ratings of the users in the same cluster
average_ratings = pivot_table.loc[users_in_same_cluster].mean()

# Sort the average ratings in descending order
sorted_ratings = average_ratings.sort_values(ascending=False)

# Example: Get top-k recommendations
k = 5
top_k_recommendations = sorted_ratings.head(k)

# Print the top-k recommendations
print("Top", k, "recommendations for user", user_id, ":")
for product_id, rating in top_k_recommendations.items():
    print("Product ID:", product_id, "Rating:", rating)

"""User Base recommendation system"""

import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity

# Load the dataset into a pandas DataFrame
data = pd.read_csv("rating_data.csv")

# Calculate user similarity using cosine similarity
user_similarity = cosine_similarity(data.values[:, 2:])

# Select neighbors for the target user (e.g., user with index 0)
target_user = 0
neighbor_indices = user_similarity[target_user].argsort()[::-1][1:]

# Generate recommendations based on the selected neighbors
recommended_items = []
for neighbor_index in neighbor_indices:
    neighbor_ratings = data.values[neighbor_index, 2:]
    target_user_ratings = data.values[target_user, 2:]

    # Find items that the neighbor has rated highly but the target user has not
    recommended_indices = [i for i, rating in enumerate(neighbor_ratings) if rating > 4 and target_user_ratings[i] == 0]

    # Add the recommended items to the list
    recommended_items.extend(data.values[target_user, recommended_indices])

# Display the recommended items
recommended_df = pd.DataFrame(recommended_items, columns=data.columns[2:])
print(recommended_df)

"""Collaborative Filtering"""

import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity

# Load the dataset into a pandas DataFrame
data = pd.DataFrame({
    'Id': [1, 2, 3],
    'ProductId': ['B001E4KFG0', 'B00813GRG4', 'B000LQOCH0'],
    'Score': [5, 1, 4],
    'Summary': ['Good Quality Dog Food', 'Not as Advertised', '"Delight" says it all'],
    'Text': ['I have bought several of the Vitality canned d...', 'Product arrived labeled as Jumbo Salted Peanut...', 'This is a confection that has been around a fe...']
})

# Create the user-item matrix
user_item_matrix = data.pivot(index='Id', columns='ProductId', values='Score').fillna(0)

# Calculate the user similarity matrix using cosine similarity
user_similarity = cosine_similarity(user_item_matrix)

# Select neighbors for the target user (e.g., user with index 0)
target_user_index = 0
neighbor_indices = user_similarity[target_user_index].argsort()[::-1][1:]

# Generate recommendations based on the selected neighbors
recommended_items = []
for neighbor_index in neighbor_indices:
    neighbor_ratings = user_item_matrix.loc[neighbor_index]
    target_user_ratings = user_item_matrix.loc[target_user_index]

    # Find items that the neighbor has rated highly but the target user has not
    recommended_indices = [i for i, rating in enumerate(neighbor_ratings) if rating > 4 and target_user_ratings[i] == 0]

    # Add the recommended items to the list
    recommended_items.extend(user_item_matrix.columns[recommended_indices])

# Display the recommended items
recommended_df = data[data['ProductId'].isin(recommended_items)]
print(recommended_df)